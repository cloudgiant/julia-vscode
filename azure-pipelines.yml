trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*

stages:

- stage: BuildAndTest
  displayName: Build and Test

  jobs:

  - job: BuildAndTest
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macOS-latest'
        windows:
          imageName: 'windows-latest'

    pool:
      vmImage: $(imageName)

    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'
      displayName: 'Install Node.js'

    - bash: |
        /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo ">>> Started xvfb"
      displayName: Start xvfb
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - bash: |
        echo ">>> Compile julia-vscode"
        npm install && npm run compile
        echo ">>> Compiled vscode-test"
        echo ">>> Run sample integration test"
        npm install && npm run compile && npm run test
      displayName: Run Tests
      env:
        DISPLAY: ':99.0'

  - job: TestJuliaLinux
    pool:
      vmImage: 'ubuntu-latest'

    strategy:
      matrix:
        Julia 1.0:
          JULIA_VERSION: '1.0'
        Julia 1.1:
          JULIA_VERSION: '1.1'
        Julia 1.2:
          JULIA_VERSION: '1.2'
        Julia 1.3:
          JULIA_VERSION: '1.3'
        Julia 1.4:
          JULIA_VERSION: '1.4'
        Julia 1.5:
          JULIA_VERSION: '1.5'
        
    steps:

    - checkout: self
      submodules: true      

    - bash: |
        wget -nv https://julialang-s3.julialang.org/bin/linux/x64/$(JULIA_VERSION)/julia-$(JULIA_VERSION)-latest-linux-x86_64.tar.gz
        mkdir julia-$(JULIA_VERSION)
        tar zxf julia-$(JULIA_VERSION)-latest-linux-x86_64.tar.gz -C julia-$(JULIA_VERSION) --strip-components 1
      displayName: 'Download and extract Julia'

    - bash: |
        ./julia-$(JULIA_VERSION)/bin/julia -e 'using InteractiveUtils; versioninfo()'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.resolve()'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("CSTParser", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("JSONRPC", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("DocumentFormat", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("LanguageServer", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("StaticLint", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("SymbolServer", coverage=true)'
      displayName: 'Run the Julia tests'

  - job: TestJuliaMacOS
    pool:
      vmImage: 'macOS-latest'

    strategy:
      matrix:
        Julia 1.0:
          JULIA_VERSION: '1.0'
        Julia 1.1:
          JULIA_VERSION: '1.1'
        Julia 1.2:
          JULIA_VERSION: '1.2'
        Julia 1.3:
          JULIA_VERSION: '1.3'
        Julia 1.4:
          JULIA_VERSION: '1.4'
        Julia 1.5:
          JULIA_VERSION: '1.5'
        
    steps:

    - checkout: self
      submodules: true      

    - bash: |
        wget -nv https://julialang-s3.julialang.org/bin/mac/x64/$(JULIA_VERSION)/julia-$(JULIA_VERSION)-latest-mac64.dmg
        mkdir juliamnt
        hdiutil mount -readonly -mountpoint juliamnt julia-$(JULIA_VERSION)-latest-mac64.dmg
        cp -a juliamnt/*.app/Contents/Resources/julia julia-$(JULIA_VERSION)
      displayName: 'Download and extract Julia'

    - bash: |
        ./julia-$(JULIA_VERSION)/bin/julia -e 'using InteractiveUtils; versioninfo()'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.resolve()'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("CSTParser", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("JSONRPC", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("DocumentFormat", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("LanguageServer", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("StaticLint", coverage=true)'
        ./julia-$(JULIA_VERSION)/bin/julia --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("SymbolServer", coverage=true)'
      displayName: 'Run the Julia tests'

  - job: TestJuliaWin
    pool:
      vmImage: 'windows-latest'

    strategy:
      matrix:
        Julia 1.0:
          JULIA_VERSION: '1.0'
        Julia 1.1:
          JULIA_VERSION: '1.1'
        Julia 1.2:
          JULIA_VERSION: '1.2'
        Julia 1.3:
          JULIA_VERSION: '1.3'
        Julia 1.4:
          JULIA_VERSION: '1.4'
        Julia 1.5:
          JULIA_VERSION: '1.5'
        
    steps:

    - checkout: self
      submodules: true      

    - powershell: |
        wget https://julialang-s3.julialang.org/bin/winnt/x64/$(JULIA_VERSION)/julia-$(JULIA_VERSION)-latest-win64.exe -OutFile julia-$(JULIA_VERSION)-latest-win64.exe
      displayName: 'Download Julia'

    - powershell: |
        Start-Process -FilePath .\julia-$(JULIA_VERSION)-latest-win64.exe -ArgumentList "/S /D=C:\julia-$(JULIA_VERSION)" -NoNewWindow -Wait
      displayName: 'Extract Julia (pre 1.4 versions)'
      condition: in(variables.JULIA_VERSION, '1.0', '1.1', '1.2', '1.3')

    - powershell: |
        Start-Process -FilePath .\julia-$(JULIA_VERSION)-latest-win64.exe -ArgumentList "/VERYSILENT /DIR=C:\julia-$(JULIA_VERSION)" -NoNewWindow -Wait
      displayName: 'Extract Julia (recent versions)'
      condition: not(in(variables.JULIA_VERSION, '1.0', '1.1', '1.2', '1.3'))

    - bash: |
        C:\\julia-$(JULIA_VERSION)\\bin\\julia.exe -e 'using InteractiveUtils; versioninfo()'
        C:\\julia-$(JULIA_VERSION)\\bin\\julia.exe --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.resolve()'
        C:\\julia-$(JULIA_VERSION)\\bin\\julia.exe --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("CSTParser", coverage=true)'
        C:\\julia-$(JULIA_VERSION)\\bin\\julia.exe --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("JSONRPC", coverage=true)'
        C:\\julia-$(JULIA_VERSION)\\bin\\julia.exe --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("DocumentFormat", coverage=true)'
        C:\\julia-$(JULIA_VERSION)\\bin\\julia.exe --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("LanguageServer", coverage=true)'
        C:\\julia-$(JULIA_VERSION)\\bin\\julia.exe --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("StaticLint", coverage=true)'
        C:\\julia-$(JULIA_VERSION)\\bin\\julia.exe --project=./scripts/languageserver/packages -e 'using Pkg; Pkg.test("SymbolServer", coverage=true)'
      displayName: 'Run the tests'
      failOnStderr: false

- stage: Package
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
  jobs:

  - job: PackageRelease
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      submodules: true

    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'
      displayName: 'Install Node.js'

    - bash: |
        echo ">>> Package julia-vscode"
        npm install
        npm run package
      displayName: Package

    - task: CopyFiles@2
      inputs:
        Contents: '*.vsix'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'release'
        publishLocation: 'Container'

  - job: PackageInsider
    pool:
      vmImage: 'windows-latest'

    variables: {description: 'Julia Language Support (Insider)', displayName: 'Julia Insider', name: 'language-julia-insider', preview: 'true'}

    steps:
    - checkout: self
      submodules: true

    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'
      displayName: 'Install Node.js'

    - task: FileTransform@2
      inputs:
        folderPath: '$(System.DefaultWorkingDirectory)'
        jsonTargetFiles: 'package.json'    

    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: 'README.md'     

    - bash: |
        mv README-insider.md README.md     

    - bash: |
        echo ">>> Package julia-vscode"
        npm install
        npm run package
      displayName: Package

    - task: CopyFiles@2
      inputs:
        Contents: '*.vsix'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'insider'
        publishLocation: 'Container'

- stage: DeployInsiderMarketplace
  displayName: 'Deploy Insider to Marketplace'
  dependsOn: [Package]
  jobs:
  - deployment: DeployInsider
    pool:
      vmImage: 'Ubuntu-latest'
    environment: 'Insider'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: insider
          - bash: |
              sudo npm install -g vsce
              PACKAGE_FILENAME=$(find $(Pipeline.Workspace) -type f -name "*.vsix")
              vsce publish -p $MARKET_KEY --packagePath $PACKAGE_FILENAME
            env:
              MARKET_KEY: $(vscekey)

- stage: DeployProductionMarketplace
  displayName: 'Deploy Release to Marketplace'
  dependsOn: [Package]
  jobs:              
  - deployment: DeployProduction
    pool:
      vmImage: 'Ubuntu-latest'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: release
          - bash: |
              sudo npm install -g vsce
              PACKAGE_FILENAME=$(find $(Pipeline.Workspace) -type f -name "*.vsix")
              vsce publish -p $MARKET_KEY --packagePath $PACKAGE_FILENAME
            env:
              MARKET_KEY: $(vscekey)
              

- stage: DeployGithub
  displayName: 'Deploy to GitHub'
  dependsOn: [Package]
  jobs:
  - deployment: DeployGithubRelease
    dependsOn: []
    pool:
      vmImage: 'Ubuntu-latest'
    environment: 'Github'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: insider
          - bash: |
              PACKAGE_FILENAME=$(find $(Pipeline.Workspace) -type f -name "*.vsix")
              echo ">>>> FILENAME"
              echo "$PACKAGE_FILENAME"
              echo "$(Build.SourceVersion)"
          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'release'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'gitTag'
              releaseNotesSource: 'inline'
              isPreRelease: true
              addChangeLog: false
              assets: $(Pipeline.Workspace)/insider/*.vsix
